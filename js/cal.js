// Generated by CoffeeScript 1.10.0
(function() {
  jQuery(function() {
    var $, add_comma, countDecimals, enter_to_calculate, factor_divider, get_numbers, get_operators, handle_neg_value, has_dot, is_negative, keys, none_parentheses_cal, numbers, operator, operator_counter, operators, parenthese_cal, remove_comma;
    $ = jQuery;
    keys = $("#calculator span");
    operator = "";
    operator_counter = 0;
    has_dot = false;
    factor_divider = ['+', '-', '*', '/'];
    numbers = [];
    operators = [];
    is_negative = false;
    $("#display_val").on("keypress", function(e) {
      var current_char, display_val, last_char, valid_keys;
      display_val = $("#display_val").val();
      last_char = display_val[display_val.length - 1];
      current_char = String.fromCharCode(e.keyCode);
      valid_keys = [13, 40, 41, 42, 45, 46, 47, 63, 43, 95, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];
      if (valid_keys.indexOf(e.keyCode) === -1) {
        return false;
      }
      if (last_char === "(" && current_char === ")") {
        return false;
      }
      if (last_char >= '0' && last_char <= '9' && current_char === "(") {
        return false;
      }
      if ((display_val.length === 0 && "+-*/".indexOf(current_char) > -1) || (last_char === "(" && "+-*/".indexOf(current_char) > -1)) {
        return false;
      }
      if (last_char === "0" && current_char === "0" && display_val.length === 1) {
        return false;
      }
      if ((last_char === "*" || last_char === "/" || last_char === "+" || last_char === "-") && current_char === ")") {
        return false;
      }
      if (display_val.indexOf("(") === -1 && current_char === ")") {
        return false;
      }
      if (e.keyCode === 13) {
        enter_to_calculate();
      }
      return true;
    });
    get_operators = function(value) {
      var operator_regex;
      operator_regex = /[^0-9.]+/g;
      operators = value.match(operator_regex);
      return operators;
    };
    get_numbers = function(value) {
      var num_regex;
      num_regex = /[\d\.]+/g;
      return numbers = value.match(num_regex);
    };
    handle_neg_value = function(display_val, neg_operators) {
      var display_val_remaining, first, negative_index, temp, temp_display_val;
      first = neg_operators.charAt(0);
      negative_index = display_val.indexOf(neg_operators);
      temp_display_val = display_val.replace(neg_operators, "");
      if (temp_display_val.indexOf("+") === -1 && temp_display_val.indexOf("+") === -1) {
        display_val = display_val.replace(neg_operators, first);
        is_negative = true;
        display_val = display_val;
      } else {
        console.log("plus position:" + display_val.indexOf("+"));
        console.log("*- position:" + display_val.indexOf(neg_operators));
        if (display_val.indexOf(neg_operators) > -1 && display_val.indexOf("+") > -1) {
          if (display_val.indexOf("+") < display_val.indexOf(neg_operators)) {
            display_val = display_val.replace(neg_operators, first);
            temp = display_val.slice(display_val.indexOf("+"));
            display_val_remaining = temp.slice(1);
            display_val = display_val.slice(0, display_val.indexOf("+")) + "+0-" + display_val_remaining;
            console.log("there is a plus ahead" + display_val);
          } else {
            display_val = display_val.replace(neg_operators, first);
            display_val = "0-" + display_val;
            console.log("there is no plus ahead" + display_val);
          }
        }
        if (display_val.indexOf(neg_operators) > -1 && display_val.indexOf("-") > -1) {
          if (display_val.indexOf("-") < display_val.indexOf(neg_operators)) {
            display_val = display_val.replace(neg_operators, first);
            temp = display_val.slice(display_val.indexOf("-"));
            display_val_remaining = temp.slice(1);
            display_val = display_val.slice(0, display_val.indexOf("+")) + "+0+" + display_val_remaining;
            console.log("there is a minus ahead" + display_val);
          } else {
            display_val = display_val.replace(neg_operators, first);
            display_val = "0+" + display_val;
            console.log("there is no minus ahead" + display_val);
          }
        }
      }
      return display_val;
    };
    enter_to_calculate = function() {
      var display_val, final_result;
      display_val = $("#display_val").val();
      display_val = remove_comma(display_val);
      operators = get_operators(display_val);
      if (operators.length >= 2) {
        if (display_val.indexOf("(") > -1 && display_val.indexOf(")") > -1) {
          final_result = parenthese_cal(display_val);
        } else {
          final_result = none_parentheses_cal(display_val);
        }
      } else {
        final_result = none_parentheses_cal(display_val);
      }
      final_result = add_comma(final_result);
      if (is_negative) {
        final_result = "-" + final_result;
      }
      return $("#display_val").val(final_result);
    };
    countDecimals = function(value) {
      var decimal_number;
      if ((value % 1) !== 0) {
        decimal_number = value.toString().split(".")[1].length;
        if (decimal_number > 8) {
          decimal_number = 8;
        }
        return decimal_number;
      }
      return 0;
    };
    remove_comma = function(value) {
      var new_value;
      new_value = value.replace(",", "");
      return new_value;
    };
    add_comma = function(value) {
      var decimal_part, integer_part, integer_value, is_integer;
      is_integer = /^\d+$/.test(value);
      if (is_integer) {
        value = value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      } else {
        if (value.toString().indexOf("-") > -1) {
          value = value.toString().replace("-", "");
          if (value.indexOf(".") > -1) {
            integer_part = value.toString().split(".")[0];
            decimal_part = value.toString().split(".")[1];
            if (decimal_part.length >= 5) {
              decimal_part = decimal_part.substring(0, 8);
            }
            integer_value = integer_part.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            value = integer_value + "." + decimal_part;
          } else {
            value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          }
          value = "-" + value;
        } else {
          integer_part = value.toString().split(".")[0];
          decimal_part = value.toString().split(".")[1];
          integer_value = integer_part.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          if (decimal_part.length >= 5) {
            decimal_part = decimal_part.substring(0, 8);
          }
          value = integer_value + "." + decimal_part;
        }
      }
      return value;
    };
    parenthese_cal = function(display_val) {
      var left_value, matches, negative_inside, parenthese_value, priority_operation, regExp, temp_index;
      console.log("parenthese equation: " + display_val);
      while (display_val.indexOf("+") > -1 || display_val.indexOf("-") > -1 || display_val.indexOf("*") > -1 || display_val.indexOf("/") > -1) {
        operators = get_operators(display_val);
        regExp = /\(([^)]+)\)/;
        matches = regExp.exec(display_val);
        parenthese_value = 0;
        negative_inside = false;
        if (matches) {
          regExp = /\(([^)]+)\)/;
          matches = regExp.exec(display_val);
          priority_operation = matches[0];
          left_value = priority_operation.replace("(", "").replace(")", "");
          numbers = get_numbers(priority_operation);
          operators = get_operators(left_value);
          temp_index = 0;
          if (left_value.indexOf("+") > -1 || left_value.indexOf("-") > -1 || left_value.indexOf("/") > -1 || left_value.indexOf("*") > -1) {
            if (($.inArray('*', operators) === -1 && $.inArray('/', operators) === -1) || ($.inArray('+', operators) === -1 && $.inArray('-', operators) === -1)) {
              $.each(operators, function(index) {
                var a, a_decimal, b, b_decimal, decimal, decimal_num, final_result, number_index, temp;
                number_index = index + temp_index;
                a = numbers[number_index];
                b = numbers[number_index + 1];
                a_decimal = countDecimals(a);
                b_decimal = countDecimals(b);
                decimal = a_decimal > b_decimal ? a_decimal : b_decimal;
                if (operators[index] === "+") {
                  temp = (parseFloat(a) + parseFloat(b)).toFixed(decimal);
                }
                if (operators[index] === "-") {
                  temp = (parseFloat(a) - parseFloat(b)).toFixed(decimal);
                }
                if (operators[index] === "*") {
                  temp = (parseFloat(a) * parseFloat(b)).toFixed(decimal);
                }
                if (operators[index] === "/") {
                  temp = parseFloat(a) / parseFloat(b);
                  console.log(temp);
                  decimal_num = countDecimals(temp);
                  if (decimal_num > 5) {
                    final_result = (parseFloat(a) / parseFloat(b)).toFixed(5);
                  } else {
                    final_result = (parseFloat(a) / parseFloat(b)).toFixed(decimal_num);
                  }
                }
                if (numbers.length > 2) {
                  numbers.splice(0, 2);
                  numbers.unshift(temp);
                  return temp_index -= 1;
                } else {
                  final_result = temp;
                  return left_value = final_result;
                }
              });
            } else {
              while (operators.length >= 1) {
                $.each(operators, function(index) {
                  var a, a_decimal, b, b_decimal, decimal, final_result, temp;
                  if (operators.indexOf("*") > -1 || operators.indexOf("/") > -1) {
                    if (operators.indexOf("+") === index || operators.indexOf("-") === index) {
                      console.log("skip this operator for now");
                      return true;
                    } else {
                      a = numbers[index];
                      b = numbers[index + 1];
                      a_decimal = countDecimals(a);
                      b_decimal = countDecimals(b);
                      decimal = a_decimal > b_decimal ? a_decimal : b_decimal;
                      if (operators[index] === "*") {
                        temp = parseFloat(a) * parseFloat(b).toFixed(decimal);
                      }
                      if (operators[index] === "/") {
                        temp = parseFloat(a) / parseFloat(b).toFixed(decimal);
                      }
                      operators.splice(index, 1);
                      if (temp) {
                        numbers[index] = temp;
                        numbers.splice(index + 1, 1);
                      }
                    }
                  } else {
                    a = numbers[index];
                    b = numbers[index + 1];
                    if (operators[index] === "+") {
                      temp = parseFloat(a) + parseFloat(b);
                    }
                    if (operators[index] === "-") {
                      temp = parseFloat(a) - parseFloat(b);
                    }
                    operators.splice(index, 1);
                    if (temp) {
                      numbers[index] = temp;
                      numbers.splice(index + 1, 1);
                    }
                  }
                  if (numbers.length === 1) {
                    final_result = numbers[0];
                    left_value = final_result;
                    if (left_value < 0) {
                      return negative_inside = true;
                    }
                  }
                });
              }
            }
          }
          display_val = display_val.replace(priority_operation, left_value);
          console.log("value inside () is " + left_value);
          continue;
        } else {
          numbers = get_numbers(display_val);
          operators = get_operators(display_val);
          if (numbers.length === 1 && operators.length === 1 && operators[0] === "-") {
            display_val = display_val.toString();
            break;
          } else {
            if (display_val.indexOf("--") > -1) {
              display_val = display_val.replace("--", "+");
            }
            if (display_val.indexOf("+-") > -1) {
              display_val = display_val.replace("+-", "-");
            }
            if (display_val.indexOf("*-") > -1) {
              display_val = handle_neg_value(display_val, "*-");
            }
            if (display_val.indexOf("/-") > -1) {
              display_val = handle_neg_value(display_val, "/-");
            }
            display_val = none_parentheses_cal(display_val);
            display_val = display_val.toString();
          }
          continue;
        }
      }
      return display_val;
    };
    none_parentheses_cal = function(left_value) {
      var final_result, temp_index;
      left_value = left_value.replace(/,/g, "");
      console.log("non-parenthese equation: " + left_value);
      if (left_value.charAt(0) === "-") {
        left_value = "0" + left_value;
      }
      numbers = get_numbers(left_value);
      operators = get_operators(left_value);
      temp_index = 0;
      final_result = 0;
      if (left_value.indexOf("+") > -1 || left_value.indexOf("-") > -1 || left_value.indexOf("/") > -1 || left_value.indexOf("*") > -1) {
        if (($.inArray('*', operators) === -1 && $.inArray('/', operators) === -1) || ($.inArray('+', operators) === -1 && $.inArray('-', operators) === -1)) {
          $.each(operators, function(index) {
            var a, a_decimal, b, b_decimal, decimal, decimal_num, number_index, temp;
            number_index = index + temp_index;
            a = numbers[number_index];
            b = numbers[number_index + 1];
            a_decimal = countDecimals(a);
            b_decimal = countDecimals(b);
            decimal = a_decimal > b_decimal ? a_decimal : b_decimal;
            if (operators[index] === "+") {
              temp = (parseFloat(a) + parseFloat(b)).toFixed(decimal);
            }
            if (operators[index] === "-") {
              temp = (parseFloat(a) - parseFloat(b)).toFixed(decimal);
            }
            if (operators[index] === "*") {
              temp = (parseFloat(a) * parseFloat(b)).toFixed(decimal);
            }
            if (operators[index] === "/") {
              temp = parseFloat(a) / parseFloat(b);
              decimal_num = countDecimals(temp);
              if (decimal_num > 5) {
                temp = temp.toFixed(5);
              } else {
                temp = temp.toFixed(decimal_num);
              }
            }
            if (numbers.length > 2) {
              numbers.splice(0, 2);
              numbers.unshift(temp);
              return temp_index -= 1;
            } else {
              return final_result = temp;
            }
          });
        } else {
          while (operators.length >= 1) {
            $.each(operators, function(index) {
              var a, a_decimal, b, b_decimal, decimal, temp;
              if (operators.indexOf("*") > -1 || operators.indexOf("/") > -1) {
                if (operators.indexOf("+") === index || operators.indexOf("-") === index) {
                  console.log("skip this operator for now");
                  return true;
                } else {
                  a = numbers[index];
                  b = numbers[index + 1];
                  a_decimal = countDecimals(a);
                  b_decimal = countDecimals(b);
                  decimal = a_decimal > b_decimal ? a_decimal : b_decimal;
                  if (operators[index] === "*") {
                    temp = parseFloat(a) * parseFloat(b).toFixed(decimal);
                  }
                  if (operators[index] === "/") {
                    temp = parseFloat(a) / parseFloat(b).toFixed(decimal);
                    console.log(temp);
                  }
                  operators.splice(index, 1);
                  if (temp) {
                    numbers[index] = temp;
                    numbers.splice(index + 1, 1);
                  }
                }
              } else {
                a = numbers[index];
                b = numbers[index + 1];
                if (operators[index] === "+") {
                  temp = parseFloat(a) + parseFloat(b);
                }
                if (operators[index] === "-") {
                  temp = parseFloat(a) - parseFloat(b);
                }
                operators.splice(index, 1);
                if (temp) {
                  numbers[index] = temp;
                  numbers.splice(index + 1, 1);
                }
              }
              if (numbers.length === 1) {
                return final_result = numbers[0];
              } else {
                return false;
              }
            });
          }
        }
      }
      if (final_result.toString().indexOf("-") > -1) {
        is_negative = false;
      }
      return final_result;
    };
    return $.each(keys, function(index, value) {
      return $(this).on("click", function() {
        var a, btn, comma_count, display_val, factor, last_char, move, next_comma, skip_text;
        btn = $(this);
        display_val = $("#display_val").val();
        if (btn.prop("id") === "clear") {
          $("#display_val").val("");
          operator = "";
          has_dot = false;
          numbers = [];
          operators = [];
          return operator_counter = 0;
        } else {
          if (btn.prop("id") === "equal") {
            return enter_to_calculate();
          } else {
            last_char = display_val[display_val.length - 1];
            if (factor_divider.indexOf(last_char) > -1) {
              factor = display_val.substring(0, display_val.length - 1);
              if (factor.indexOf(".") > -1) {
                has_dot = false;
              }
            }
            if (btn.hasClass("operator")) {
              if (display_val.length >= 1) {
                operator_counter += 1;
                operator = btn.text();
                if (factor_divider.indexOf(last_char) > -1) {
                  display_val = display_val.slice(0, -1);
                }
              }
            }
            if (btn.prop("id") === "dot") {
              if (!has_dot) {
                display_val += btn.text();
                has_dot = true;
              }
            } else {
              skip_text = false;
              if (last_char === "(" && btn.text() === ")") {
                skip_text = true;
              }
              if (last_char >= '0' && last_char <= '9' && btn.text() === "(") {
                skip_text = true;
              }
              if ((display_val.length === 0 && btn.hasClass("operator")) || (last_char === "(" && btn.hasClass("operator"))) {
                skip_text = true;
              }
              if (last_char === "0" && btn.text() === "0" && display_val.length === 1) {
                skip_text = true;
              }
              if ((last_char === "*" || last_char === "/" || last_char === "+" || last_char === "-") && btn.text() === ")") {
                skip_text = true;
              }
              if (display_val.indexOf("(") === -1 && btn.text() === ")") {
                skip_text = true;
              }
              if (!skip_text) {
                display_val += btn.text();
                display_val = display_val.replace(/,/g, "");
                comma_count = display_val.length / 3;
                if (comma_count > 2) {
                  display_val = display_val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                } else {
                  a = display_val.length - 3;
                  next_comma = 1;
                  move = 0;
                  while (a > 0) {
                    display_val = display_val.slice(0, a + move) + "," + display_val.slice(a + move);
                    a -= 3;
                    next_comma += 1;
                    move += 1;
                  }
                }
              }
            }
            return $("#display_val").val(display_val);
          }
        }
      });
    });
  });

}).call(this);
